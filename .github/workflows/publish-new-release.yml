name: "Publish new release"

on:
#  pull_request:
#    branches:
#      - master
#    types:
#      - closed
  push:
    branches:
      - release-on-branch-merged

jobs:
  release:
    name: Publish new release
    runs-on: ubuntu-latest
#    if: github.event.pull_request.merged == true # only merged pull requests must trigger this job
    steps:
      - name: Extract version from branch name (for release branches)
#        if: startsWith(github.event.pull_request.head.ref, 'release/')
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          VERSION=${BRANCH_NAME#release/}

          COMMIT=$(git rev-parse HEAD)

          echo "::set-env name=RELEASE_VERSION::test-$COMMIT"

      - name: Create Release
        id: create-release
        uses: thomaseizinger/create-release@1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          target_commitish: ${{ github.event.pull_request.merge_commit_sha }}
          tag_name: ${{ env.RELEASE_VERSION }}
          name: ${{ env.RELEASE_VERSION }}
          draft: false
          prerelease: false

      - name: Save upload url to text file
        run: |
          echo "${{ steps.create-release.outputs.upload_url }}" > upload_url.txt

      - name: Store upload url as an artifact
        uses: actions/upload-artifact@v1
        with:
          name: upload-url
          path: upload-url.txt

#      - name: Merge release into dev branch
#        uses: thomaseizinger/create-pull-request@1.0.0
#        with:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          head: release/${{ env.RELEASE_VERSION }}
#          base: dev
#          title: Merge release ${{ env.RELEASE_VERSION }} into dev branch
#          body: |
#            This PR merges the release branch for ${{ env.RELEASE_VERSION }} back into dev.
#            This happens to ensure that the updates that happend on the release branch, i.e. CHANGELOG and manifest updates are also present on the dev branch.

  build_and_attach_binary:
    name: Build and attach binary to release
    strategy:
      matrix:
        os: [ubuntu, macos]
    runs-on: ${{ matrix.os }}-latest
    needs: release
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.merge_commit_sha }}

      - name: Extract toolchain version from rust-toolchain
        run: echo "::set-env name=RUST_TOOLCHAIN::$(cat rust-toolchain)"

      - name: Install ${{ env.RUST_TOOLCHAIN }} toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          override: true

      - name: Build ${{ matrix.os }} release binary
        id: build
        run: |
          make build BUILD_ARGS='--release'
          mkdir ~/package
          ARCHIVE_NAME="comit-rs_${{ env.RELEASE_VERSION }}_$(uname -s)_$(uname -m).tar.gz"
          cd ~/artifacts && tar czvf ~/package/$ARCHIVE_NAME *

          echo "::set-output name=archive-name::$ARCHIVE_NAME"

      - name: Download upload url artifact
        uses: actions/download-artifact@v1
        with:
          name: upload-url

      - name: Make upload url available as an env variable
        run: echo "::set-env name=UPLOAD_URL::$(cat upload-url.txt)"

      - name: Upload ${{ matrix.os }} release binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ~/package/${{ steps.build.outputs.archive-name }}
          asset_name: ${{ steps.build.outputs.archive-name }}
          asset_content_type: application/gzip

      - name: Login to docker
        uses: azure/docker-login@v1
        with:
          username: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
          password: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}

      - name: Publish docker image
        run: |
          docker build . -t comitnetwork/cnd:${{ env.RELEASE_VERSION }} -t comitnetwork/cnd:latest
          docker push comitnetwork/cnd:${{ env.RELEASE_VERSION }}
#          docker push comitnetwork/cnd:latest
